; vim: ft=gitconfig
<<<<<<< HEAD
=======
[alias]
    # Standard aliases
    a       = add
	aa      = add .
	bl      = blame
	b       = branch
	be      = branch --edit-description
	bv      = branch --verbose
	done    = branch --verbose --merged
	um      = branch --verbose --no-merged
	co      = checkout
	cb      = checkout -b
	ct      = checkout --track
	master  = checkout master
	ci      = commit
	ca      = commit --amend
	cm      = commit -m
	get     = config --get
	cfg     = config --global --edit
	lasttag = describe --tags --abbrev=0
	d       = diff
	dc      = diff --cached
	dino    = diff --name-only
	dns     = diff --ignore-all-space
	fo      = fetch origin
	fom     = fetch origin master
	git     = !exec git
	g       = grep --break --heading --line-number
	l       = log --abbrev-commit --date=short --pretty=ld
	ll      = log --abbrev-commit --oneline --decorate --all
	lm      = ld --author="davidosomething"
	lb      = log --abbrev-commit --oneline --decorate --all --graph
	lg      = log --abbrev-commit           --decorate --all --graph
	new     = log --no-merges --abbrev-commit --oneline         ORIG_HEAD..
	news    = log --no-merges --abbrev-commit --oneline --stat  ORIG_HEAD..
	m       = merge
	pom     = pull --ff-only origin master
	pullall = "!f() { git pull \"$@\" && git submodule update --init --recursive; }; f"
	pure    = pull --rebase
	pum     = pull --ff-only upstream master
	pf      = push --force-with-lease
	poh     = push -u origin HEAD
	puh     = push upstream HEAD
	rb      = rebase
	rbc     = rebase --continue
	rso     = remote show origin
	reorigin = remote set-url origin
	rehard  = reset --hard
	forget  = rm -r --cached
	last    = show --show-signature
	st      = status
	s       = status --short --branch
	squashwip = rebase -i @{u}
	subup   = submodule update --init
	t       = tag
	track   = branch -u
	dsf     = "!f() { [ -z \"$GIT_PREFIX\" ] || cd -- \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"

	# ---------------------------------------------------------------------------
	# aliases to git-extras provided
	# ---------------------------------------------------------------------------
	cl      = changelog --list
	copy    = copy-branch
	dmb     = delete-merged-branches

	# ---------------------------------------------------------------------------
	# my own git-* commands
	# ---------------------------------------------------------------------------
	rel     = relevant

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av
    cam = commit -am

    # Push to master
    pom = push origin master

    # Publish the current branch by pushing and tracking
    publish = "!git push -u origin $(git branch-name)"

    # Unpublish the current branch by deleting the remote branch
    unpublish = "!git push origin :$(git branch-name)"

    # Prune stale items
    pruner = !git prune --expire=now; git reflog expire --expire-unreachable=now --rewrite --all

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Show changes for a daily standup meeting
    log-standup = !git log --since yesterday --pretty=short --author `git config user.email`

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find text in any commit ever
    grep-all = !"git rev-list --all | xargs git grep '$1'"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Merge GitHub pull request on top of the `master` branch
    mpr = "!f() { \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git rebase master pr/$1 && \
            git checkout master && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
    }; f"

    # List remote branches.
    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

	    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name.

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

    # Remove last commits (by default it removes the last commit).

    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"

    ##### TOPIC BRANCHES (git flow)
    # Create a new topic branch
    topic-start = '!branch=$1; git checkout master; git pull; git checkout -b "$branch" master'

    # Update the topic branch
    topic-pull = '!branch=$(git branch-name); git checkout master; git pull; git checkout "$branch"; git rebase master'

    # Share the topic branch
    topic-push = '!branch=$(git branch-name); git push -u origin "$branch"'
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Undo last commits (by default it undoes the last commit).

    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"

# ============================================================================
# Repo settings and command options
# ============================================================================
[blame]
	date = short
	showEmail = true

[branch]
	autosetupmerge = always
	autosetuprebase = always

[tag]
	forceSignAnnotated = true
>>>>>>> cb93a004cb5007745476d616955ef767d2aa08bf

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix
<<<<<<< HEAD

[blame]
	date = short
	showEmail = true
    
[branch]
	autosetupmerge = always
	autosetuprebase = always
=======

[commit]
	verbose = true
	gpgsign = true

[core]
    compression = -1
	editor = code --wait
    autocrlf = input
	commitGraph = true
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace=fix,space-before-tab,tab-in-indent,trailing-space,cr-at-eol
	#  excludesfile = ~/.git.d/.gitignore
	   # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
	    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false
    ignorecase = false
    	
	sharedRepository = 0664
	commentchar = ";"

[diff]
	compactionHeuristic = true
	renames = true
	renameLimit = 12650

[pager]
	# insanely beautiful diffs ==> npm install -g diff-so-fancy
	diff = diff-so-fancy | less --tabs=4 -RFX
	show = diff-so-fancy | less --tabs=4 -RFX

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
	tool = opendiff
	renameLimit = 0

[push]
    # Use the Git 1.x.x default to avoid errors on machines with old Git
    # installations. To use `simple` instead, add this to your `~/.extra` file:
    # `git config --global push.default simple`. See http://git.io/mMah-w.
    default = matching
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[rebase]
	stat = true

[pretty]
	ld      = %C(yellow)%h %C(reset)%s %C(green)(%cr) %C(blue)<%an>%C(magenta)%d%C(reset)
    
[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
[stash]
	showPatch = true
[log]
    date = relative
>>>>>>> cb93a004cb5007745476d616955ef767d2aa08bf

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[github]
    user = cici
	# Use Keychain.app
	# https://stackoverflow.com/a/7552971/230473
	#token = !security find-generic-password -gs \"GitHub API Token\" 2>&1 >/dev/null | awk '/password/ {print $2}' | tr -d \\\"

[gitlab]
    user = cici_sleestak

[credential]
    helper = osxkeychain
# ============================================================================
# Color
# ============================================================================
[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    branch      = auto
	diff        = auto
	grep        = auto
	interactive = auto
	status      = auto
	ui          = auto
	pager       = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
	meta = yellow bold
	commit = green bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
    newMoved = cyan
    oldMoved = blue

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = "red bold 52"
	newNormal = "green bold"
    newHighlight = "green bold 22"

[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[commit]
	verbose = true
	gpgsign = true

[core]
    compression = -1
	editor = code --wait
    autocrlf = input
	commitGraph = true
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace=fix,space-before-tab,tab-in-indent,trailing-space,cr-at-eol
	#  excludesfile = ~/.git.d/.gitignore
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes_global
    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

<<<<<<< HEAD
    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    ignorecase = false
    sharedRepository = 0664
	commentchar = ";"

[diff]
	compactionHeuristic = true
	renames = true
	renameLimit = 12650

[filter "media"]
	clean     = git media clean %f
	smudge    = git media smudge %f
	required  = true

[filter "lfs"]
	clean     = git-lfs clean %f
	smudge    = git-lfs smudge %f
	required  = true

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
	tool = opendiff
	renameLimit = 0


[push]
    # Use the Git 1.x.x default to avoid errors on machines with old Git
    # installations. To use `simple` instead, add this to your `~/.extra` file:
    # `git config --global push.default simple`. See http://git.io/mMah-w.
    default = matching
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[rebase]
	stat = true

[rerere]
	enabled = 1

[tag]
	forceSignAnnotated = true

# URL shorthands (rewrites of repo paths)
=======
# ============================================================================
# URL aliases
# ============================================================================
>>>>>>> cb93a004cb5007745476d616955ef767d2aa08bf
[url "git@github.com:"]
    insteadOf = "https://github.com/"
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
	pushInsteadOf = "https://github.com/"

[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"

<<<<<<< HEAD
[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
[stash]
	showPatch = true
[log]
    date = relative
	
[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[github]
    user = cici
    # Use Keychain.app
	# https://stackoverflow.com/a/7552971/230473
	#token = !security find-generic-password -gs \"GitHub API Token\" 2>&1 >/dev/null | awk '/password/ {print $2}' | tr -d \\\"

[gitlab]
    user = cici_sleestak

[credential]
    helper = osxkeychain
    
# ============================================================================
# Programs (assumes may be overridden by OS settings)
# ============================================================================

[gui]
	fontui = -family \"Fira Sans\" -size -10 -weight normal -slant roman -underline 0 -overstrike 0
	fontdiff = -family \"Fira Mono for Powerline\" -size -10 -weight normal -slant roman -underline 0 -overstrike 0
	commitmsgwidth = 80
	diffcontext = 10

[difftool]
	prompt = false

[mergetool]
	prompt = false

[pager]
    status = true
	# insanely beautiful diffs ==> npm install -g diff-so-fancy
	diff = diff-so-fancy | less --tabs=4 -RFX
	show = diff-so-fancy | less --tabs=4 -RFX

[credential]
	helper = osxkeychain
=======
# ============================================================================
[include]
	path = ./aliases,gitconfig
>>>>>>> cb93a004cb5007745476d616955ef767d2aa08bf
