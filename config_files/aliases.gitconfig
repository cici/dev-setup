[alias]
	a       = add
	aa      = add .


    # Amend the currently staged files to the latest commit
    amend   = commit --amend --reuse-message=HEAD

	bl      = blame

	b       = branch
	be      = branch --edit-description
	bv      = branch --verbose
	done    = branch --verbose --merged
	um      = branch --verbose --no-merged

    # Clone a repository including all submodules
    c       = clone --recursive
	co      = checkout
	cb      = checkout -b
	ct      = checkout --track
	master  = checkout master

    # Commit all changes
    ca      = !git add -A && git commit -av
    cam     = commit -am
	ci      = commit
	ca      = commit --amend
	cm      = commit -m

	get     = config --get
	cfg     = config --global --edit

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Show the diff between the latest commit and the current state
    d       = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	#d       = diff
	dc      = diff --cached
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di      = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	dino    = diff --name-only
	dns     = diff --ignore-all-space

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	fo      = fetch origin
	fom     = fetch origin master

	git     = !exec git
	g       = grep --break --heading --line-number
	
	# Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # List remote branches.
    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l       = log --pretty=oneline -n 20 --graph --abbrev-commit
	#l       = log --abbrev-commit --date=short --pretty=ld
	ll      = log --abbrev-commit --oneline --decorate --all
	lm      = ld --author="davidosomething"
	lb      = log --abbrev-commit --oneline --decorate --all --graph
	lg      = log --abbrev-commit           --decorate --all --graph
	new     = log --no-merges --abbrev-commit --oneline         ORIG_HEAD..
	news    = log --no-merges --abbrev-commit --oneline --stat  ORIG_HEAD..

	m       = merge

    # Merge GitHub pull request on top of the `master` branch
    mpr = "!f() { \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git rebase master pr/$1 && \
            git checkout master && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
    }; f"

    # Pull in remote changes for the current repository and all its submodules
    p       = !"git pull; git submodule foreach git pull origin master"

    # Push to master
    pom     = push origin master
	#pom     = pull --ff-only origin master
	pullall = "!f() { git pull \"$@\" && git submodule update --init --recursive; }; f"
	pure    = pull --rebase
	pum     = pull --ff-only upstream master

	pf      = push --force-with-lease
	poh     = push -u origin HEAD
	puh     = push upstream HEAD

	rb      = rebase
	rbc     = rebase --continue

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
	
	# Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"


    # Remove last commits (by default it removes the last commit).
    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"

	rso     = remote show origin
	reorigin = remote set-url origin

	rehard  = reset --hard

	forget  = rm -r --cached

	last    = show --show-signature

    # View the current working tree status using the short format
	s       = status --short --branch
	st      = status

	squashwip = rebase -i @{u}

	subup   = submodule update --init

	t       = tag

	track   = branch -u

	dsf     = "!f() { [ -z \"$GIT_PREFIX\" ] || cd -- \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"

    # Undo last commits (by default it undoes the last commit).

    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"

    # aliases for tags
	lasttag = describe --tags --abbrev=0

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

	# ---------------------------------------------------------------------------
	# aliases to git-extras provided
	# ---------------------------------------------------------------------------

	cl      = changelog --list
	copy    = copy-branch
	dmb     = delete-merged-branches

	# ---------------------------------------------------------------------------
	# my own git-* commands
	# ---------------------------------------------------------------------------

	rel     = relevant
